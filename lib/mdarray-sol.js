/* Generated by Opal 0.9.2 */
(function(Opal) {
  Opal.dynamic_require_severity = "error";
  var OPAL_CONFIG = { method_missing: true, arity_check: false, freezing: true, tainting: true };
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$upcase']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {};
  (function($base, $super) {
    function $Variable(){};
    var self = $Variable = $klass($base, $super, 'Variable', $Variable);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$initialize', TMP_1 = function() {
      var self = this, $iter = TMP_1.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil;

      TMP_1.$$p = null;
      $zuper = [];
      for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
        $zuper[$zuper_index] = arguments[$zuper_index];
      }
      return Opal.find_super_dispatcher(self, 'initialize', TMP_1, $iter).apply(self, $zuper);
    });

    return (Opal.defn(self, '$hello', function() {
      var self = this;

      return "hello world from js";
    }), nil) && 'hello';
  })($scope.base, null);
  return (function($base, $super) {
    function $MyCoolClass(){};
    var self = $MyCoolClass = $klass($base, $super, 'MyCoolClass', $MyCoolClass);

    var def = self.$$proto, $scope = self.$$scope;

    return (Opal.defn(self, '$some_method', function(input_string) {
      var self = this;

      return input_string.$upcase();
    }), nil) && 'some_method'
  })($scope.base, null);
})(Opal);
